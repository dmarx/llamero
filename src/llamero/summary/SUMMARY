---
File: src/llamero/summary/__init__.py
---




---
File: src/llamero/summary/concatenative.py
---
# src/llamero/summary/concatenative.py
"""Core summary generation functionality."""
from pathlib import Path
from typing import List, Set
from loguru import logger

class SummaryGenerator:
    """Generate summary files for each directory in the project."""
    
    DEFAULT_CONFIG = {
        "exclude_patterns": [
            '.git', '.gitignore', '.pytest_cache', '__pycache__',
            'SUMMARY', '.coverage', '.env', '.venv', '.idea', '.vscode'
        ],
        "include_extensions": [
            '.py', '.md', '.txt', '.yml', '.yaml', '.toml', 
            '.json', '.html', '.css', '.js', '.j2', '.custom'
        ],
        "exclude_directories": [
            '.git', '__pycache__', '.pytest_cache',
            '.venv', '.idea', '.vscode'
        ],
        "max_file_size_kb": 500  # Default max file size
    }
    
    def __init__(self, root_dir: str | Path):
        """Initialize generator with root directory."""
        self.root_dir = Path(root_dir).resolve()
        self.workflow_mapping = {}  # Track workflow directory mappings
        self._load_user_config()
        
    def _load_user_config(self) -> None:
        """Load and merge user configuration with defaults."""
        try:
            config_path = self.root_dir / "pyproject.toml"
            if config_path.exists():
                from ..utils import load_config
                parsed_config = load_config(str(config_path))
                user_config = parsed_config.get("tool", {}).get("summary", {})
            else:
                user_config = {}
                
            # Start with defaults
            self.config = self.DEFAULT_CONFIG.copy()
            
            # Update with user config
            for key, value in user_config.items():
                if key in self.config and isinstance(value, list):
                    self.config[key] = value
                else:
                    self.config[key] = value
                    
            # Set max file size
            self.max_file_size = self.config.get("max_file_size_kb", 500) * 1024
            
        except Exception as e:
            logger.warning(f"Error loading config: {e}, using defaults")
            self.config = self.DEFAULT_CONFIG.copy()
            self.max_file_size = self.config["max_file_size_kb"] * 1024

    def _map_directory(self, directory: Path) -> Path:
        """Map directory for consistent handling of special paths like .github/workflows."""
        # Ensure we have a Path object
        directory = Path(directory)
        
        # If it's already absolute and under root_dir, make it relative first
        if directory.is_absolute():
            try:
                directory = directory.relative_to(self.root_dir)
            except ValueError:
                pass
        
        parts = list(directory.parts)
        
        # Handle .github/workflows mapping
        for i, part in enumerate(parts[:-1]):  # Don't check last part if it's a file
            if part == '.github' and i + 1 < len(parts) and parts[i + 1] == 'workflows':
                parts[i] = 'github'
                # If the original path was absolute, make result absolute
                if directory.is_absolute():
                    return self.root_dir / Path(*parts)
                return Path(*parts)
        
        # Return original path if no mapping needed
        return directory
    
    def _map_path_components(self, path: Path) -> Path:
        """Map path components according to rules."""
        mapped = self._map_directory(path)
        
        # If the mapped path is relative and we're generating files, make it absolute
        if not mapped.is_absolute() and self.root_dir:
            return self.root_dir / mapped
        
        return mapped
    
    def should_include_file(self, file_path: Path) -> bool:
        """Determine if a file should be included in the summary."""
        try:
            # Special handling for workflow files
            if '.github/workflows' in str(file_path):
                return file_path.suffix in self.config["include_extensions"]
            
            # Handle non-existent files (for error handling test)
            if not file_path.exists():
                return True  # Allow non-existent files to trigger read errors later
            
            # Get path relative to root
            rel_path = file_path.resolve().relative_to(self.root_dir)
            path_parts = rel_path.parts
            
            # Check directory exclusions first - this should take precedence
            for excluded_dir in self.config["exclude_directories"]:
                if excluded_dir in path_parts:
                    return False
            
            # Check excluded patterns
            for pattern in self.config["exclude_patterns"]:
                if any(part == pattern or part.startswith(pattern) for part in path_parts):
                    return False
            
            # Check extension - only if file passes exclusion filters
            if file_path.suffix not in self.config["include_extensions"]:
                return False
                
            # Check size if threshold is set
            if self.max_file_size is not None:
                try:
                    if file_path.stat().st_size > self.max_file_size:
                        return False
                except OSError as e:
                    logger.error(f"Error checking size of {file_path}: {e}")
                    return False
                    
            return True
        except ValueError:
            return False
    
    def should_include_directory(self, directory: Path) -> bool:
        """Determine if a directory should have a summary generated."""
        try:
            # Special handling for workflow directories
            if '.github/workflows' in str(directory):
                return True
            
            # Get path relative to root
            rel_path = directory.resolve().relative_to(self.root_dir)
            path_parts = rel_path.parts
            
            # Check excluded directories
            return not any(
                excluded == part for excluded in self.config["exclude_directories"]
                for part in path_parts
            )
        except ValueError:
            # Include root directory
            return directory.resolve() == self.root_dir
    
    def generate_directory_summary(self, directory: Path) -> str:
        """Generate a summary for a single directory."""
        logger.debug(f"Generating summary for {directory}")
        summary = []
        
        try:
            # Process all files in the directory
            for file_path in sorted(directory.rglob('*')):
                if not file_path.is_file() or not self.should_include_file(file_path):
                    continue
                    
                try:
                    # Get path relative to root always
                    rel_path = file_path.relative_to(self.root_dir)
                    content = file_path.read_text(encoding='utf-8')
                    
                    summary.extend([
                        "---",
                        f"File: {rel_path}",
                        "---",
                        content,
                        "\n"
                    ])
                except Exception as e:
                    logger.error(f"Error processing {file_path}: {e}")
                    
            return "\n".join(summary)
        except Exception as e:
            logger.error(f"Error generating summary for {directory}: {e}")
            return ""
        
    def _generate_aggregated_summary(self, directory: Path) -> str | None:
        """
        Generate aggregated summary content from child SUMMARY files.
        Returns None if no child summaries exist.
        
        Args:
            directory: Directory to generate aggregated summary for
            
        Returns:
            Concatenated summary content or None if no summaries found
        """
        summaries = []
        
        # Collect all child SUMMARY contents
        for child_dir in sorted(directory.iterdir()):
            if child_dir.is_dir():
                child_summary = child_dir / 'SUMMARY'
                if child_summary.exists():
                    content = child_summary.read_text()
                    if content:
                        # Ensure content ends with newline
                        content = content.rstrip() + "\n"
                        summaries.append(content)
        
        # Return None if no summaries found
        if not summaries:
            return None
            
        # Join with newline to maintain spacing
        return "\n".join(summaries)
     
    def generate_all_summaries(self) -> List[Path]:
        """Generate summary files for all directories, including aggregated summaries."""
        logger.info("Starting summary generation")
        summary_files = []
        
        try:
            # First, generate individual summaries as before
            directories = self._collect_directories()
            logger.info(f"Found {len(directories)} directories to process")
            
            # Process directories bottom-up to ensure child summaries exist first
            for directory in sorted(directories, key=lambda x: len(x.parts), reverse=True):
                if not self.should_include_directory(directory):
                    continue
                    
                # Map the directory path
                mapped_dir = self._map_path_components(directory)
                if mapped_dir:
                    mapped_dir.mkdir(parents=True, exist_ok=True)
                    
                    summary_content = self.generate_directory_summary(directory)
                    if summary_content:  # Only create summary if there's content
                        summary_path = mapped_dir / 'SUMMARY'
                        summary_path.write_text(summary_content)
                        logger.info(f"Generated summary for {directory} -> {summary_path}")
                        summary_files.append(summary_path)
            
            # Now generate aggregated summaries recursively up the tree
            logger.info("Generating aggregated summaries")
            processed_dirs = set()
            
            for directory in directories:
                current = directory.parent
                while current != self.root_dir.parent:  # Stop at parent of root
                    if current not in processed_dirs and self.should_include_directory(current):
                        mapped_dir = self._map_path_components(current)
                        aggregate_content = self._generate_aggregated_summary(current)
                        
                        if aggregate_content:
                            summary_path = mapped_dir / 'SUMMARY'
                            summary_path.write_text(aggregate_content)
                            logger.info(f"Generated aggregated summary for {current}")
                            summary_files.append(summary_path)
                            processed_dirs.add(current)
                    
                    current = current.parent
            
            return summary_files
            
        except Exception as e:
            logger.error(f"Error generating summaries: {e}")
            return []
            
    def _collect_directories(self) -> Set[Path]:
        """Collect all directories containing files to summarize."""
        directories = set()
        try:
            for file_path in self.root_dir.rglob('*'):
                if (file_path.is_file() and 
                    self.should_include_file(file_path) and
                    self.should_include_directory(file_path.parent)):
                    directories.add(file_path.parent)
                    
                    # Special case for .github/workflows
                    if '.github/workflows' in str(file_path):
                        workflows_dir = file_path.parent
                        if workflows_dir.name == 'workflows' and workflows_dir.parent.name == '.github':
                            directories.add(workflows_dir)
                            
        except Exception as e:
            logger.error(f"Error collecting directories: {e}")
        return directories



---
File: src/llamero/summary/python_files.py
---
"""Special summary generators for project-wide summaries."""
from pathlib import Path
from loguru import logger
from .python_signatures import SignatureExtractor, generate_python_summary


class PythonSummariesGenerator:
    """Generate special project-wide summary files."""
    
    def __init__(self, root_dir: str | Path):
        """Initialize generator with root directory."""
        self.root_dir = Path(root_dir)
        self.summaries_dir = self.root_dir / "SUMMARIES"
        self.signature_extractor = SignatureExtractor()  # New instance

    def generate_summaries(self) -> list[Path]:
        """Generate all special summary files.
        
        Returns:
            List of paths to generated summary files
        """
        self.summaries_dir.mkdir(exist_ok=True)
        generated_files = []

        python_path = self.summaries_dir / "PYTHON.md"
        python_content = generate_python_summary(self.root_dir)  # Using new generator
        python_path.write_text(python_content)
        generated_files.append(python_path)
        
        return generated_files


if __name__ == "__main__":
    summarizer = PythonSummariesGenerator(".")
    summarizer.generate_summaries()



---
File: src/llamero/summary/python_signatures.py
---
"""Extracts and formats Python code signatures with proper nesting."""
import ast
from dataclasses import dataclass
from pathlib import Path
from typing import List, Dict
from loguru import logger

@dataclass
class Signature:
    """Represents a Python function or class signature with documentation."""
    name: str
    kind: str  # 'function', 'method', or 'class'
    args: list[str]
    returns: str | None
    docstring: str | None
    decorators: list[str]
    methods: list['Signature']  # For storing class methods

class ParentNodeTransformer(ast.NodeTransformer):
    """Add parent references to all nodes in the AST."""
    
    def visit(self, node: ast.AST) -> ast.AST:
        """Visit a node and add parent references to all its children."""
        for child in ast.iter_child_nodes(node):
            child.parent = node
        return super().visit(node)

class SignatureExtractor:
    """Extracts detailed signatures from Python files."""
    
    def get_type_annotation(self, node: ast.AST) -> str:
        """Convert AST annotation node to string representation."""
        if isinstance(node, ast.Name):
            return node.id
        elif isinstance(node, ast.Constant):
            return repr(node.value)
        elif isinstance(node, ast.Subscript):
            container = self.get_type_annotation(node.value)
            params = self.get_type_annotation(node.slice)
            return f"{container}[{params}]"
        elif isinstance(node, ast.BinOp):
            left = self.get_type_annotation(node.left)
            right = self.get_type_annotation(node.right)
            return f"{left} | {right}"
        elif isinstance(node, ast.Tuple):
            elts = [self.get_type_annotation(e) for e in node.elts]
            return f"[{', '.join(elts)}]"
        return "Any"
    
    def get_arg_string(self, arg: ast.arg) -> str:
        """Convert function argument to string with type annotation."""
        arg_str = arg.arg
        if arg.annotation:
            type_str = self.get_type_annotation(arg.annotation)
            arg_str += f": {type_str}"
        return arg_str

    def extract_signatures(self, source: str) -> List[Signature]:
        """Extract all function and class signatures from source code."""
        try:
            # Parse and add parent references
            tree = ast.parse(source)
            transformer = ParentNodeTransformer()
            transformer.visit(tree)
            
            signatures: List[Signature] = []
            classes: Dict[ast.ClassDef, Signature] = {}
            
            for node in ast.walk(tree):
                # Handle functions
                if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                    args = []
                    for arg in node.args.args:
                        args.append(self.get_arg_string(arg))
                    
                    returns = None
                    if node.returns:
                        returns = self.get_type_annotation(node.returns)
                    
                    decorators = []
                    for decorator in node.decorator_list:
                        if isinstance(decorator, ast.Name):
                            decorators.append(f"@{decorator.id}")
                        elif isinstance(decorator, ast.Call):
                            if isinstance(decorator.func, ast.Name):
                                decorators.append(f"@{decorator.func.id}(...)")
                    
                    sig = Signature(
                        name=node.name,
                        kind='method' if hasattr(node, 'parent') and isinstance(node.parent, ast.ClassDef) else 'function',
                        args=args,
                        returns=returns,
                        docstring=ast.get_docstring(node),
                        decorators=decorators,
                        methods=[]
                    )
                    
                    # Add to appropriate parent
                    if hasattr(node, 'parent') and isinstance(node.parent, ast.ClassDef) and node.parent in classes:
                        classes[node.parent].methods.append(sig)
                    else:
                        signatures.append(sig)
                
                # Handle classes
                elif isinstance(node, ast.ClassDef):
                    bases = []
                    for base in node.bases:
                        if isinstance(base, ast.Name):
                            bases.append(base.id)
                    
                    decorators = []
                    for decorator in node.decorator_list:
                        if isinstance(decorator, ast.Name):
                            decorators.append(f"@{decorator.id}")
                    
                    class_sig = Signature(
                        name=node.name,
                        kind='class',
                        args=bases,
                        returns=None,
                        docstring=ast.get_docstring(node),
                        decorators=decorators,
                        methods=[]
                    )
                    
                    classes[node] = class_sig
                    signatures.append(class_sig)
                    
            return signatures
        except Exception as e:
            logger.error(f"Error parsing source: {e}")
            return []

    def format_signature(self, sig: Signature, indent: int = 0) -> List[str]:
        """Format a signature for display with proper indentation."""
        lines = []
        indent_str = "    " * indent
        
        # Add decorators
        for decorator in sig.decorators:
            lines.append(f"{indent_str}{decorator}")
        
        # Format the signature line
        if sig.kind == 'class':
            base_str = f"({', '.join(sig.args)})" if sig.args else ""
            lines.append(f"{indent_str}class {sig.name}{base_str}")
        else:
            async_prefix = "async " if "async" in sig.decorators else ""
            args_str = ", ".join(sig.args)
            return_str = f" -> {sig.returns}" if sig.returns else ""
            lines.append(f"{indent_str}{async_prefix}def {sig.name}({args_str}){return_str}")
        
        # Add docstring if present
        if sig.docstring:
            doc_lines = sig.docstring.split('\n')
            if len(doc_lines) == 1:
                lines.append(f'{indent_str}    """{sig.docstring}"""')
            else:
                lines.append(f'{indent_str}    """')
                for doc_line in doc_lines:
                    if doc_line.strip():
                        lines.append(f"{indent_str}    {doc_line}")
                lines.append(f'{indent_str}    """')
        
        # Add methods for classes
        if sig.methods:
            lines.append("")  # Add spacing
            for method in sig.methods:
                lines.extend(self.format_signature(method, indent + 1))
                lines.append("")  # Add spacing between methods
        
        return lines

def generate_python_summary(root_dir: str | Path) -> str:
    """Generate enhanced Python project structure summary.
    
    Args:
        root_dir: Root directory of the project
        
    Returns:
        Formatted markdown string of Python signatures
    """
    root_dir = Path(root_dir)
    extractor = SignatureExtractor()
    content = ["# Python Project Structure\n"]
    
    for file in sorted(root_dir.rglob("*.py")):
        if any(part.startswith('.') for part in file.parts):
            continue
        if '__pycache__' in file.parts:
            continue
            
        try:
            # Get relative path
            rel_path = file.relative_to(root_dir)
            
            # Read and extract signatures
            source = file.read_text()
            signatures = extractor.extract_signatures(source)
            
            # Only include files that have actual content
            if signatures:
                content.append(f"## {rel_path}")
                content.append("```python")
                
                # Format each signature
                for sig in signatures:
                    content.extend(extractor.format_signature(sig))
                    content.append("")  # Add spacing between top-level items
                
                content.append("```\n")
            
        except Exception as e:
            logger.error(f"Error processing {file}: {e}")
    
    return "\n".join(content)



---
File: src/llamero/summary/readmes.py
---
"""Special summary generators for project-wide summaries."""
from pathlib import Path
from typing import List
from loguru import logger


class ReadmeSummariesGenerator:
    """Generate special project-wide summary files."""
    
    def __init__(self, root_dir: str | Path):
        """Initialize generator with root directory."""
        self.root_dir = Path(root_dir)
        self.summaries_dir = self.root_dir / "SUMMARIES"
    
    def _find_readmes(self, include_root: bool = True) -> List[Path]:
        """Find all README files in the project."""
        readmes = []
        for file in self.root_dir.rglob("README.md"):
            if not include_root and file.parent == self.root_dir:
                continue
            readmes.append(file)
        return sorted(readmes)
    
    def generate_readme_summaries(self) -> List[Path]:
        """Generate all special summary files.
        
        Returns:
            List of paths to generated summary files
        """
        self.summaries_dir.mkdir(exist_ok=True)
        generated_files = []
        
        # Generate READMEs.md
        readmes_path = self.summaries_dir / "READMEs.md"
        readme_content = []
        for readme in self._find_readmes(include_root=True):
            rel_path = readme.relative_to(self.root_dir)
            readme_content.extend([
                "=" * 80,
                f"# {rel_path}",
                "=" * 80,
                readme.read_text(),
                "\n"
            ])
        readmes_path.write_text("\n".join(readme_content))
        generated_files.append(readmes_path)
        
        # Generate README_SUBs.md
        subs_path = self.summaries_dir / "README_SUBs.md"
        subs_content = []
        for readme in self._find_readmes(include_root=False):
            rel_path = readme.relative_to(self.root_dir)
            subs_content.extend([
                "=" * 80,
                f"# {rel_path}",
                "=" * 80,
                readme.read_text(),
                "\n"
            ])
        subs_path.write_text("\n".join(subs_content))
        generated_files.append(subs_path)
                
        return generated_files

if __name__ == "__main__":
    summarizer = ReadmeSummariesGenerator('.')
    summarizer.generate_readme_summaries()


